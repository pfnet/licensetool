#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const util = require('util');
const { stringify } = require('csv-stringify/sync');
const { strict: assert } = require('node:assert');

const licenseChecker = require('license-checker-rseidelsohn');
const spdxLicenseList = require('spdx-license-list/full');

function parseArgs() {
  const argv = process.argv;
  assert(argv[2] === 'format');
  const parsed = util.parseArgs({
    options: {
      config: {
        type: 'string',
      },
      output: {
        type: 'string',
        default: 'text',
      },
    },
    allowPositionals: true,
    strict: true,
  });
  assert(parsed.values.config !== undefined);
  return {
    action: 'format',
    config: parsed.values.config,
    output: parsed.values.output,
  };
}

function strcmp(s1, s2) {
  if (s1 < s2) {
    return -1;
  }
  if (s1 === s2) {
    return 0;
  }
  return 1;
}

const parsedArgs = parseArgs();
assert(parsedArgs.action === 'format');
const config = require(path.resolve(parsedArgs.config));

class PackageProcessError extends Error {
  constructor({ message, detail }) {
    super();
    this.message = message;
    this.detail = detail;
  }
}

class LicenseMap {
  constructor() {
    this.data = [];
  }

  static fromLicenseCheckerResult(licenseData, { onsuccess, onerror }) {
    const map = new LicenseMap();
    const errors = [];
    for (const [packageName, info] of Object.entries(licenseData)) {
      const packageConfig = config.packages[packageName] ?? {};
      try {
        map.#addPackage(packageName, packageConfig, info);
      } catch (e) {
        if (e instanceof PackageProcessError) {
          errors.push(e);
        } else {
          throw e;
        }
      }
    }
    if (errors.length > 0) {
      onerror(errors);
    } else {
      onsuccess(map);
    }
  }

  #addPackage(packageName, packageConfig, info) {
    if (packageConfig.omit) {
      return;
    }

    // Resolve license ID
    const [licenseId, isLicenseIdGivenInConfig] = (() => {
      if (packageConfig.licenseId) {
        return [packageConfig.licenseId, true];
      }
      return [info.licenses, false];
    })();

    // Omit public domain packages
    if (licenseId === 'Public Domain') {
      return;
    }

    const spdxLicenseMetadata = spdxLicenseList[licenseId];

    // Retrieve license name
    // Note: License IDs "guessed" by license-checker-rseidelsohn (designated by *, e.g. "MIT*") are intentionally made errors.
    const licenseName = (() => {
      if (packageConfig.licenseName) {
        return packageConfig.licenseName;
      }
      if (spdxLicenseMetadata && spdxLicenseMetadata.name) {
        return spdxLicenseMetadata.name;
      }
      throw new PackageProcessError({
        message: 'Unable to determine license name.',
        detail: {
          packageName,
          licenseId,
          licenseInfo: info,
          packageConfig,
        },
      });
    })();

    // Resolve license text
    const licenseContent = (() => {
      if (packageConfig.licenseContent) {
        return packageConfig.licenseContent;
      }
      // Retrieve the license file path.
      // Use info.licenseFile only when:
      // - not explicitly invalidated in config (with licenseFile: null)
      // - it's not a README file
      const licenseFile =
        packageConfig.licenseFile === null
          ? undefined
          : info.licenseFile === undefined
          ? undefined
          : new RegExp('[^/]*readme[^/]*$', 'i').test(info.licenseFile)
          ? undefined
          : info.licenseFile;
      // License file content, if any.
      if (licenseFile !== undefined) {
        return fs.readFileSync(info.licenseFile).toString();
      }
      // Fall back to spdx-license-list.
      if (spdxLicenseMetadata.licenseText) {
        return spdxLicenseMetadata.licenseText;
      }
      throw new PackageProcessError({
        message: 'License text could not retrieved. You may need to specify the license manually.',
        detail: {
          packageName,
          licenseInfo: info,
          packageConfig,
        },
      });
    })();

    // Add to package entries
    const data = this.data;
    let entry = data.find(
      (localEntry) =>
        localEntry.licenseName === licenseName && localEntry.licenseContent === licenseContent,
    );
    if (!entry) {
      entry = { licenseName, licenseContent, packageNames: [] };
      data.push(entry);
    }
    entry.packageNames.push(packageName);
  }

  #formatText() {
    const buf = [];
    const data = this.data;
    for (const entry of data) {
      buf.push('-----------------------------------------');
      buf.push('License notices for packages:');
      for (const packageName of entry.packageNames) {
        buf.push('  ' + packageName);
      }
      buf.push('');
      buf.push('='.repeat(entry.licenseName.length + 1));
      buf.push(entry.licenseName);
      buf.push('='.repeat(entry.licenseName.length + 1));
      buf.push('');
      buf.push(entry.licenseContent);
      buf.push('');
    }

    return buf.join('\n');
  }

  #formatCsv() {
    const data = this.data;
    const rows = [];
    for (const entry of data) {
      for (const packageName of entry.packageNames) {
        rows.push({ packageName, licenseName: entry.licenseName });
      }
    }
    return stringify(rows, { header: true, columns: ['licenseName', 'packageName'] });
  }

  format(output) {
    // Sort
    this.data.sort((entry1, entry2) => strcmp(entry1.licenseName, entry2.licenseName));
    for (const entry of this.data) {
      entry.packageNames.sort(strcmp);
    }

    if (output === 'text') {
      return this.#formatText();
    }
    if (output === 'csv') {
      return this.#formatCsv();
    }
    throw new Error(`Invalid output: ${output}`);
  }
}

licenseChecker.init(
  {
    start: '.',
    production: true,
    excludePrivatePackages: true,
  },
  (inputError, result) => {
    if (inputError) {
      console.error(inputError);
      process.exit(1);
    }
    LicenseMap.fromLicenseCheckerResult(result, {
      onsuccess: (map) => {
        console.log(map.format(parsedArgs.output));
      },
      onerror: (errors) => {
        console.error(`${errors.length} errors are found.`);
        for (const error of errors) {
          console.error(
            util.inspect(
              {
                error: error.message,
                detail: error.detail,
              },
              { depth: null, colors: true },
            ),
          );
        }
      },
    });
  },
);
